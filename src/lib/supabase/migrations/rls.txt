BEGIN
  IF NEW.is_deleted = true THEN
    -- Set parent_id to NULL for the row being updated
    NEW.parent_id = NULL;
    -- Set is_deleted to true and parent_id to NULL for other rows with the same parent_id
    UPDATE pages SET is_deleted = true, parent_id = null WHERE parent_id = new.uuid;
  END IF;
  RETURN NEW;
END;

CREATE OR REPLACE FUNCTION "public"."update_children_when_delete_parent"() RETURNS trigger
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  IF NEW.is_deleted = true THEN
    -- Set parent_id to NULL for the row being updated
    NEW.parent_id = NULL;
    -- Set is_deleted to true and parent_id to NULL for other rows with the same parent_id
    UPDATE pages SET is_deleted = true, parent_id = null WHERE parent_id = new.uuid;
  END IF;
  RETURN NEW;
END;
$$;

ALTER FUNCTION "public"."update_children_when_delete_parent"() OWNER TO "postgres";
CREATE TRIGGER trigger_update_children_when_delete_parent AFTER UPDATE ON public.pages FOR EACH ROW EXECUTE FUNCTION update_children_when_delete_parent();

CREATE TRIGGER trigger_updated_at BEFORE UPDATE ON public.pages FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');

ALTER TABLE ONLY "public"."pages"
    ADD CONSTRAINT "pages_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE;
